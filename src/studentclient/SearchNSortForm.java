/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchNSortForm.java
 *
 * Created on Jan 17, 2011, 9:36:13 AM
 */

package studentclient;

import Common.PrivilegeMode;
import Common.Properties;
import Common.DataTable;
import Common.Lecturer;
import Common.StudyAreas;
import Common.Person;
import Common.Student;
import Common.Functionality;
import Common.DatabaseEntry;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Thushan
 */
public class SearchNSortForm extends javax.swing.JFrame {

    /** Creates new form SearchNSortForm */
    ArrayList<Person> searchResults;
    ArrayList<Person> sortResults;
    ArrayList<Person> currentResults;

    DefaultTableModel model;

    private static Functionality func;
    public SearchNSortForm(Functionality afunc) {
        func=afunc;
        initComponents();

        if(func == Functionality.SEARCH_SINGLE || func == Functionality.SEARCH_MULTIPLE || func==Functionality.SORT){
        advPanel.setVisible(false);
        this.setSize(getWidth(), getHeight()-100);
        }
        else{
            advPanel.setVisible(true);
            //this.setSize(getWidth(), getHeight()+100);
        }

        if(func == Functionality.SEARCH_SINGLE || func == Functionality.SEARCH_MULTIPLE)
            searchRadio.setSelected(true);
        else if(func == Functionality.SORT)
            sortRadio.setSelected(true);

        if(func==Functionality.DELETELecturer){
            databaseCombo.setSelectedIndex(1);
            interestCombo.setEnabled(true);
        } else
            interestCombo.setEnabled(false);

        model = (DefaultTableModel) jTable1.getModel();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchSortGroup = new javax.swing.ButtonGroup();
        selectGroup = new javax.swing.ButtonGroup();
        searchRadio = new javax.swing.JRadioButton();
        sortRadio = new javax.swing.JRadioButton();
        criteriaCombo = new javax.swing.JComboBox();
        tableScroll = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        databaseCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        goButton = new javax.swing.JButton();
        advSearchButton = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        advPanel = new javax.swing.JPanel();
        allRadio = new javax.swing.JRadioButton();
        noneRadio = new javax.swing.JRadioButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        updateCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        newValueText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        advanceToggle = new javax.swing.JToggleButton();
        interestCombo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        searchSortGroup.add(searchRadio);
        searchRadio.setSelected(true);
        searchRadio.setText("Search");
        searchRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRadioActionPerformed(evt);
            }
        });

        searchSortGroup.add(sortRadio);
        sortRadio.setText("Sort");
        sortRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortRadioActionPerformed(evt);
            }
        });

        criteriaCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Last Name", "First Name", "Index No", "Semester", "Study Area" }));
        criteriaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criteriaComboActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name with Initials", "First Name", "IndexNo", "Date of Birth", "Address", "Telephone No:", "Semester", "Qualification", "Study Area"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScroll.setViewportView(jTable1);

        databaseCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Students", "Lecturers" }));
        databaseCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                databaseComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Database: ");

        jLabel2.setText("by:");

        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        advSearchButton.setText("Advance Search");
        advSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advSearchButtonActionPerformed(evt);
            }
        });

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });

        selectGroup.add(allRadio);
        allRadio.setText("Select All");
        allRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRadioActionPerformed(evt);
            }
        });

        selectGroup.add(noneRadio);
        noneRadio.setText("Select None");
        noneRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneRadioActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Selected");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update Selected");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        updateCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Semester" }));
        updateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateComboActionPerformed(evt);
            }
        });

        jLabel3.setText("Change to:");

        jButton1.setText("Generate Report");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout advPanelLayout = new javax.swing.GroupLayout(advPanel);
        advPanel.setLayout(advPanelLayout);
        advPanelLayout.setHorizontalGroup(
            advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(advPanelLayout.createSequentialGroup()
                        .addComponent(allRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noneRadio))
                    .addGroup(advPanelLayout.createSequentialGroup()
                        .addComponent(updateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newValueText, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 355, Short.MAX_VALUE)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        advPanelLayout.setVerticalGroup(
            advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(advPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allRadio)
                    .addComponent(noneRadio)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(advPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(updateButton)
                    .addComponent(newValueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        advanceToggle.setText("Advance");
        advanceToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advanceToggleActionPerformed(evt);
            }
        });

        interestCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PROGRAMMING", "ALGORITHMS", "SECURITY", "NETWORKING", "HARDWARE" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(advPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(databaseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortRadio))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(criteriaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(interestCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(advSearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goButton))
                    .addComponent(advanceToggle))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 820, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(databaseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchRadio)
                    .addComponent(sortRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(goButton)
                    .addComponent(criteriaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(advSearchButton)
                    .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(interestCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(advanceToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(advPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // TODO add your handling code here:
        DatabaseEntry entry;
        DataTable dTable=null;

        if(databaseCombo.getSelectedIndex()==0)
                dTable=DataTable.Students;
        else if (databaseCombo.getSelectedIndex()==1)
                dTable=DataTable.Lecturers;

        //search
        if(searchRadio.isSelected()){

            //Simple search - search only one database
            
            //Check the selected search criteria
            if(criteriaCombo.getSelectedIndex()==0)
                //searchResults=DatabaseHandler.searchSingle(Properties.LastName, searchText.getText(), dTable);
                searchResults=(ArrayList<Person>)ServerSend.sendMessage(new DatabaseEntry(Functionality.SEARCH_SINGLE,new Person(searchText.getText(),null),Properties.LastName,dTable));
            else if(criteriaCombo.getSelectedIndex()==1)
            //    searchResults=DatabaseHandler.searchSingle(Properties.FirstName, searchText.getText(), dTable);
              searchResults=(ArrayList<Person>)ServerSend.sendMessage(new DatabaseEntry(Functionality.SEARCH_SINGLE,new Person(null,searchText.getText()),Properties.FirstName,dTable));

            //Check the database when indexNo is the search criteria
            if(criteriaCombo.getSelectedIndex()==2 && dTable==DataTable.Students)
                //searchResults=DatabaseHandler.searchSingle(Properties.IndexNo, searchText.getText(), dTable);
                searchResults=(ArrayList<Person>)ServerSend.sendMessage(new DatabaseEntry(Functionality.SEARCH_SINGLE,new Student(null,null,searchText.getText(),-1),Properties.IndexNo,dTable));
            else if(criteriaCombo.getSelectedIndex()==2 && dTable==DataTable.Lecturers)
                JOptionPane.showMessageDialog(null, "Invalid Combination");

            if(criteriaCombo.getSelectedIndex()==3 && dTable==DataTable.Students)
                //searchResults=DatabaseHandler.searchSingle(Properties.Semester, searchText.getText(), dTable);
                searchResults=(ArrayList<Person>)ServerSend.sendMessage(new DatabaseEntry(Functionality.SEARCH_SINGLE,new Student(null,null,null,Integer.parseInt(searchText.getText())),Properties.Semester,dTable));
            else if(criteriaCombo.getSelectedIndex()==3 && dTable==DataTable.Lecturers)
                JOptionPane.showMessageDialog(null, "Invalid Combination");

            if(criteriaCombo.getSelectedIndex()==4 && dTable==DataTable.Lecturers){
                StudyAreas interest=null;
                if(interestCombo.getSelectedIndex()==0)
                    interest=StudyAreas.PROGRAMMING;
                else if(interestCombo.getSelectedIndex()==1)
                    interest=StudyAreas.ALGORITHMS;
                else if(interestCombo.getSelectedIndex()==2)
                    interest=StudyAreas.SECURITY;
                else if(interestCombo.getSelectedIndex()==3)
                    interest=StudyAreas.NETWORKING;
                else if(interestCombo.getSelectedIndex()==4)
                    interest=StudyAreas.HARDWARE;

                //searchResults=DatabaseHandler.searchSingle(Properties.StudyArea, interest, dTable);
                searchResults=(ArrayList<Person>)ServerSend.sendMessage(new DatabaseEntry(Functionality.SEARCH_SINGLE, new Lecturer(null,null,interest), Properties.StudyArea, dTable));
            }
            else if(criteriaCombo.getSelectedIndex()==4 && dTable==DataTable.Students)
                JOptionPane.showMessageDialog(null, "Invalid Combination");

            currentResults=searchResults;
            displayInTable(searchResults,dTable);

            //check whether the results are empty
            if(searchResults.isEmpty()){
                JOptionPane.showMessageDialog(null, "Sorry, No matches found");
        }
        //sorting
        else if(sortRadio.isSelected()){
            Properties prop = null;
            //Check the selected sort criteria
            if(criteriaCombo.getSelectedIndex()==0)
                prop=Properties.LastName;
                
            else if(criteriaCombo.getSelectedIndex()==1)
                prop=Properties.FirstName;



            sortResults=(ArrayList<Person>)ServerSend.sendMessage(new DatabaseEntry(Functionality.SORT,null,prop,dTable));
            currentResults=sortResults;
            displayInTable(sortResults,dTable);
            }
        }
    }//GEN-LAST:event_goButtonActionPerformed

    //Display the results in the table and dynamically change size
    public void displayInTable(ArrayList<Person> person, DataTable dTable ){

        
        model.setRowCount(0);


        if (dTable == DataTable.Students) {
            Student stu;
            if (person != null) {
                for (int i = 0; i < person.size(); i++) {
                    stu = (Student) person.get(i);
                    model.insertRow(jTable1.getRowCount(), new Object[]{stu.getNameWithInit(), stu.getFirstName(), stu.getIndexNo(), stu.getDOBString(), stu.getAddress(), stu.getTelNo(), stu.getSemester(), null, null});
                }
            }
        } else if (dTable == DataTable.Lecturers) {
            Lecturer lec;
            if (person != null) {
                for (int i = 0; i < person.size(); i++) {
                    lec = (Lecturer) person.get(i);
                    model.insertRow(jTable1.getRowCount(), new Object[]{lec.getNameWithInit(), lec.getFirstName(), null, lec.getDOBString(), lec.getAddress(), lec.getTelNo(), null, lec.getQualification().toString(), lec.getStudyArea().toString()});
                }
            }
        }
        else if(dTable == DataTable.StudentsAndLectureres) {
            Person per;
          
            for (int i = 0; i < person.size(); i++) {
                per = person.get(i);
                if(per != null){
                if( per.getUserName()==null)
                    model.insertRow(jTable1.getRowCount(),new Object[]{});

                
                    if(per.getPrivilegeMode()==PrivilegeMode.Student)
                        model.insertRow(jTable1.getRowCount(), new Object[]{per.getNameWithInit(), per.getFirstName(), ((Student)per).getIndexNo(),per.getDOBString(),per.getAddress(),per.getTelNo(),((Student)per).getSemester(),null,null});
                    else if(per.getPrivilegeMode()==PrivilegeMode.Lecturer)
                       model.insertRow(jTable1.getRowCount(), new Object[]{per.getNameWithInit(), per.getFirstName(), null,per.getDOBString(),per.getAddress(),per.getTelNo(),null,((Lecturer)per).getQualification().toString(),((Lecturer)per).getStudyArea().toString()});
                    
                }
                

            }
        }
      
    }

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchTextActionPerformed

    private void advSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advSearchButtonActionPerformed
        // TODO add your handling code here:
        FrameHandler.showAdvSearchForm(this);
    }//GEN-LAST:event_advSearchButtonActionPerformed

    private void sortRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortRadioActionPerformed
        // TODO add your handling code here:
        searchText.setEnabled(false);
    }//GEN-LAST:event_sortRadioActionPerformed

    private void searchRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRadioActionPerformed
        // TODO add your handling code here:
        searchText.setEnabled(true);
    }//GEN-LAST:event_searchRadioActionPerformed

    private void advanceToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advanceToggleActionPerformed
        // TODO add your handling code here:
        if(advanceToggle.isSelected()){
            advPanel.setVisible(true);
            this.setSize(getWidth(), getHeight()+100);
        }else{
            advPanel.setVisible(false);
            this.setSize(getWidth(), getHeight()-100);
        }
    }//GEN-LAST:event_advanceToggleActionPerformed

    private void databaseComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_databaseComboActionPerformed
        // TODO add your handling code here:
        //Student database selected
        if(databaseCombo.getSelectedIndex()==0){
            updateCombo.setEnabled(true);
            updateButton.setEnabled(true);

            //update semester is seleteted
            if(updateCombo.getSelectedIndex()==0)
                updateButton.setEnabled(true);
            else
                updateButton.setEnabled(false);
        //Lecture database selected
        }else{
            updateCombo.setEnabled(false);
            updateButton.setEnabled(false);
            if(criteriaCombo.getSelectedIndex()==4)
                interestCombo.setEnabled(true);
            else
                interestCombo.setEnabled(false);


        }
    }//GEN-LAST:event_databaseComboActionPerformed

    private void allRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRadioActionPerformed
        // TODO add your handling code here:
        jTable1.selectAll();
    }//GEN-LAST:event_allRadioActionPerformed

    private void noneRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneRadioActionPerformed
        // TODO add your handling code here:
        jTable1.clearSelection();
    }//GEN-LAST:event_noneRadioActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        DataTable dtable = null;
        int confirmSelected = 1;
        int[] selectedIdx=jTable1.getSelectedRows();
        if(selectedIdx.length != 0 && !currentResults.isEmpty()){
            for(int i=0;i<selectedIdx.length;i++){

                //set the database to delete entry
                if (currentResults.get(selectedIdx[i]).getPrivilegeMode() != null) {
                    if (currentResults.get(selectedIdx[i]).getPrivilegeMode() == PrivilegeMode.Student) {
                        dtable = DataTable.Students;
                    } else if ((currentResults.get(selectedIdx[i]).getPrivilegeMode() == PrivilegeMode.Lecturer)) {
                        dtable = DataTable.Lecturers;
                    }
                    confirmSelected=JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?");
                    
                    if(confirmSelected==0)
                        //DatabaseHandler.Delete(currentResults.get(selectedIdx[i]).getUserName(), dtable);
                        ServerSend.sendMessage(new DatabaseEntry(Functionality.DELETEStudent,currentResults.get(selectedIdx[i]), Properties.UserName, dtable));
                        currentResults.remove(selectedIdx[i]);

                }
                if(confirmSelected==0)
                    model.removeRow(selectedIdx[i]);
            }
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if(!newValueText.getText().isEmpty()){
            int[] selectedIdx=jTable1.getSelectedRows();
            for(int i=0;i<selectedIdx.length;i++){
                
                //DatabaseHandler.update(currentResults.get(selectedIdx[i]).getUserName(),Properties.Semester,newValueText.getText(), DataTable.Students);
                ((Student) currentResults.get(selectedIdx[i])).setSemester(Integer.parseInt(newValueText.getText()));
                ServerSend.sendMessage(new DatabaseEntry(Functionality.UPDATE,currentResults.get(selectedIdx[i]) , Properties.UserName, DataTable.Students));
                model.setValueAt(Integer.parseInt(newValueText.getText()), selectedIdx[i], 6);
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void criteriaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criteriaComboActionPerformed
        // TODO add your handling code here:

        //interests and lecture database is selected
        if(criteriaCombo.getSelectedIndex()==4 && databaseCombo.getSelectedIndex()==1){
            interestCombo.setEnabled(true);
            searchText.setEnabled(false);
        }else{
            interestCombo.setEnabled(false);
            searchText.setEnabled(true);
        }

    }//GEN-LAST:event_criteriaComboActionPerformed

    private void updateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateComboActionPerformed
        // TODO add your handling code here:
        if(updateCombo.getSelectedIndex()==0){
        if(databaseCombo.getSelectedIndex()==0)
            updateButton.setEnabled(true);
        else
            updateButton.setEnabled(false);
        }
    }//GEN-LAST:event_updateComboActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser jChooser=new JFileChooser();
        jChooser.showSaveDialog(null);
        String savePath=jChooser.getSelectedFile().getAbsolutePath();
        if(savePath.length()!=0){
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter(savePath+".txt"));
                for(int i=0;i<currentResults.size();i++){
                    for(int j=0;j<7;j++){
                        bw.append(getPersonDetails(currentResults.get(i))[j]+"\n");
                    }
                    bw.append("\n");
                }
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(SearchNSortForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private String[] getPersonDetails(Person person){
        String[] details=new String[8];

        details[0]="Name with initials: "+person.getNameWithInit();
        details[1]="First name: "+person.getFirstName();
        details[2]="Date of birth: "+person.getDOBString();
        details[3]="Gender: "+person.getGender().toString();
        details[4]="Address: "+person.getAddress();
        details[5]="Telephone number: "+person.getTelNo();

        if(person.getPrivilegeMode()==PrivilegeMode.Student){
        details[6]="Index no: "+((Student) person).getIndexNo();
        details[7]="Current semester: "+((Student) person).getSemester();
        }

        if(person.getPrivilegeMode()==PrivilegeMode.Lecturer){
        details[6]="Study area: "+((Lecturer) person).getStudyArea();
        details[7]="Qualification: "+((Lecturer) person).getQualification();
        }

        return details;

    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SearchNSortForm dialog = new SearchNSortForm(func);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advPanel;
    private javax.swing.JButton advSearchButton;
    private javax.swing.JToggleButton advanceToggle;
    private javax.swing.JRadioButton allRadio;
    private javax.swing.JComboBox criteriaCombo;
    private javax.swing.JComboBox databaseCombo;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton goButton;
    private javax.swing.JComboBox interestCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField newValueText;
    private javax.swing.JRadioButton noneRadio;
    private javax.swing.JRadioButton searchRadio;
    private javax.swing.ButtonGroup searchSortGroup;
    private javax.swing.JTextField searchText;
    private javax.swing.ButtonGroup selectGroup;
    private javax.swing.JRadioButton sortRadio;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JButton updateButton;
    private javax.swing.JComboBox updateCombo;
    // End of variables declaration//GEN-END:variables

}
